//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-3753-73D4-B5                      |
// |                     Nimrod Ben-Em, C 4 Security Ltd                     |
// +-------------------------------------------------------------------------+
//
//
//      This file contains the user-defined type definitions.
//      To use it press F2 in IDA and enter the name of this file.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();
	LowVoids(0x400238);
	HighVoids(0x607B50);
}

static Enums_0(id) {

	id = AddEnum(-1,"quoting_style",0x1100000);
	AddConstEx(id,"literal_quoting_style",	0,	-1);
	AddConstEx(id,"shell_quoting_style",	0X1,	-1);
	AddConstEx(id,"shell_always_quoting_style",	0X2,	-1);
	AddConstEx(id,"c_quoting_style",	0X3,	-1);
	AddConstEx(id,"c_maybe_quoting_style",	0X4,	-1);
	AddConstEx(id,"escape_quoting_style",	0X5,	-1);
	AddConstEx(id,"locale_quoting_style",	0X6,	-1);
	AddConstEx(id,"clocale_quoting_style",	0X7,	-1);
	AddConstEx(id,"custom_quoting_style",	0X8,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        BeginTypeUpdating(UTP_ENUM);
	id = Enums_0(id);
        EndTypeUpdating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = GetStrucIdByName("option");
	SetType(GetMemberId(id, 0x0), "const char *");
	SetType(GetMemberId(id, 0x8), "int");
	SetType(GetMemberId(id, 0x10), "int *");
	SetType(GetMemberId(id, 0x18), "int");
	id = GetStrucIdByName("quoting_options");
	SetType(GetMemberId(id, 0x0), "quoting_style");
	SetType(GetMemberId(id, 0x4), "int");
	SetType(GetMemberId(id, 0x8), "unsigned int[8]");
	SetType(GetMemberId(id, 0x28), "const char *");
	SetType(GetMemberId(id, 0x30), "const char *");
	id = GetStrucIdByName("slotvec");
	SetType(GetMemberId(id, 0x0), "size_t");
	SetType(GetMemberId(id, 0x8), "char *");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = AddStrucEx(-1,"option",0);
	id = AddStrucEx(-1,"quoting_options",0);
	id = AddStrucEx(-1,"slotvec",0);
	
	id = GetStrucIdByName("option");
	mid = AddStrucMember(id,"name",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = AddStrucMember(id,"has_arg",	0X8,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"flag",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = AddStrucMember(id,"val",	0X18,	0x20000400,	-1,	4);
	SetStrucAlign(id,3);
	
	id = GetStrucIdByName("quoting_options");
	mid = AddStrucMember(id,"style",	0,	0x28800400,	GetEnum("quoting_style"),	4);
	mid = AddStrucMember(id,"flags",	0X4,	0x20000400,	-1,	4);
	mid = AddStrucMember(id,"quote_these_too",	0X8,	0x20000400,	-1,	32);
	mid = AddStrucMember(id,"left_quote",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = AddStrucMember(id,"right_quote",	0X30,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	SetStrucAlign(id,3);
	
	id = GetStrucIdByName("slotvec");
	mid = AddStrucMember(id,"size",	0,	0x30000400,	-1,	8);
	mid = AddStrucMember(id,"val",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	SetStrucAlign(id,3);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        BeginTypeUpdating(UTP_STRUCT);
	id = Structures_0(id);
        EndTypeUpdating(UTP_STRUCT);
}

// End of file.
